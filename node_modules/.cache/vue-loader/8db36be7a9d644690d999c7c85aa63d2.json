{"remainingRequest":"/Users/jz/shoppingcart/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jz/shoppingcart/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/jz/shoppingcart/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jz/shoppingcart/src/components/CheckOutForm.vue?vue&type=template&id=e8375b8c&scoped=true&","dependencies":[{"path":"/Users/jz/shoppingcart/src/components/CheckOutForm.vue","mtime":1638081500407},{"path":"/Users/jz/shoppingcart/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jz/shoppingcart/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/jz/shoppingcart/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jz/shoppingcart/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}